---
description: Enforce robust and consistent testing standards for Next.js and React components
globs: ["**/__tests__/**/*.test.tsx", "**/__tests__/**/*.test.ts"]
alwaysApply: false
---
# Next.js and React Testing Standards

This rule ensures robust, consistent, and maintainable tests for Next.js and React applications based on lessons learned from debugging test failures in CI environments.

## Valid Example

```tsx
// __tests__/components/ThemeToggle.test.tsx
import { render, screen, fireEvent, act } from '@testing-library/react';
import { ThemeToggle } from '@/components/ThemeToggle';
import { ThemeProvider } from '@/contexts/ThemeContext';

// Mock any dependencies at the top of the file
jest.mock('@/lib/settings', () => ({
  loadSettings: jest.fn().mockReturnValue({ darkMode: false }),
  saveSettings: jest.fn(),
}));

// Import mocked functions to access in tests
import { saveSettings } from '@/lib/settings';

describe('ThemeToggle Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('toggles theme when clicked', async () => {
    // Always wrap components with their required providers
    render(
      <ThemeProvider>
        <ThemeToggle />
      </ThemeProvider>
    );

    // Find elements using accessible queries
    const toggle = screen.getByRole('checkbox', { name: /dark mode/i });
    
    // Wrap state changes in act() and include a small delay for stability
    await act(async () => {
      fireEvent.click(toggle);
      // Small delay to ensure all state updates complete
      await new Promise(resolve => setTimeout(resolve, 0));
    });
    
    // Verify expected behavior
    expect(saveSettings).toHaveBeenCalled();
  });
});
```

## Invalid Example

```tsx
// __tests__/components/ThemeToggle.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ThemeToggle } from '@/components/ThemeToggle';

// No provider wrapping
// No mocks for dependencies
// Missing act() around state changes

test('toggles theme', () => {
  render(<ThemeToggle />);
  
  // Using text to find elements can be fragile across environments
  const toggle = screen.getByText('Theme');
  
  // Missing act() around state changes
  fireEvent.click(toggle);
  
  // Lacking specific assertions
  expect(document.body).toHaveClass('dark');
});
```

## Guidelines

### 1. Test Setup Best Practices

- **Mock Dependencies Consistently**:
  ```tsx
  // Place mocks at the top of the file
  jest.mock('@/lib/audio', () => ({
    initAudio: jest.fn().mockResolvedValue(undefined),
    playSound: jest.fn().mockResolvedValue(undefined),
    // Include all functions used by the component
  }));
  
  // Import mocked functions for assertions
  import { playSound } from '@/lib/audio';
  ```

- **Provider Wrapping**:
  ```tsx
  // Always wrap components in necessary providers
  render(
    <AudioProvider>
      <ThemeProvider>
        <ComponentUnderTest />
      </ThemeProvider>
    </AudioProvider>
  );
  ```

- **Clear Mocks Between Tests**:
  ```tsx
  beforeEach(() => {
    jest.clearAllMocks();
    localStorage.clear(); // If using localStorage
  });
  ```

### 2. Resilient Element Selection

- **Prefer Accessible Queries**:
  ```tsx
  // GOOD - More resilient across environments
  const button = screen.getByRole('button', { name: /settings/i });
  
  // AVOID - Fragile across environments
  const button = screen.getByText('Settings');
  ```

- **DOM Traversal for Complex Components**:
  ```tsx
  // If role-based queries don't work, use DOM traversal
  const heading = screen.getByText('Dark Mode');
  const container = heading.closest('.settings-row');
  const toggle = container?.querySelector('input[type="checkbox"]');
  ```

### 3. Handle Asynchronous Updates

- **Always Wrap State Changes in `act()`**:
  ```tsx
  // For synchronous updates
  act(() => {
    fireEvent.click(button);
  });
  
  // For asynchronous updates
  await act(async () => {
    fireEvent.click(button);
    // Small delay ensures state updates complete
    await new Promise(resolve => setTimeout(resolve, 0));
  });
  ```

- **Wait for Elements to Appear**:
  ```tsx
  // For elements that appear after an action
  await screen.findByText('Success');
  ```

### 4. Environment-Aware Tests

- **CI Environment Considerations**:
  ```tsx
  // Use conditional logic for CI environments if needed
  const findToggle = () => {
    if (process.env.CI) {
      // CI-specific element finding strategy
      return container.querySelector('input[aria-label="dark mode"]');
    } else {
      // Local development strategy
      return screen.getByRole('checkbox', { name: /dark mode/i });
    }
  };
  ```

- **Cross-Browser Element Finding**:
  ```tsx
  // Try multiple strategies to find elements
  let element;
  try {
    element = screen.getByRole('checkbox', { name: /dark mode/i });
  } catch (e) {
    // Fallback strategy
    const section = screen.getByText('Dark Mode').closest('section');
    element = section?.querySelector('input[type="checkbox"]');
  }
  ```

### 5. Integration Testing

- **Test Complete User Flows**:
  ```tsx
  test('completes a workout and shows summary', async () => {
    // Start with a consistent state
    jest.useFakeTimers();
    
    render(<WorkoutApp />);
    
    // Interact with the app as a user would
    fireEvent.click(screen.getByText('Start Workout'));
    
    // Fast-forward time for long processes
    act(() => {
      jest.advanceTimersByTime(60000); // 1 minute
    });
    
    // Verify the expected outcome
    expect(screen.getByText('Workout Complete')).toBeInTheDocument();
    
    // Clean up
    jest.useRealTimers();
  });
  ```

- **Mock Time for Predictable Tests**:
  ```tsx
  beforeEach(() => {
    jest.useFakeTimers();
    jest.setSystemTime(new Date('2023-01-01'));
  });
  
  afterEach(() => {
    jest.useRealTimers();
  });
  ```

### 6. Debug Strategies

- **Snapshot State for Debugging**:
  ```tsx
  // When troubleshooting test failures
  test('debug element rendering', () => {
    render(<MyComponent />);
    
    // Log the DOM for inspection
    console.log(screen.debug());
    
    // Or log specific element
    const element = screen.getByText('Title');
    console.log(element.outerHTML);
  });
  ```

- **Test Isolation**:
  ```bash
  # Run a single test file
  npm test -- __tests__/components/MyComponent.test.tsx
  
  # Run a specific test
  npm test -- -t "toggles theme when clicked"
  ```

### 7. Mock Implementation

- **Mock Return Values Based on Arguments**:
  ```tsx
  const mockFunction = jest.fn().mockImplementation((arg) => {
    if (arg === 'success') {
      return Promise.resolve({ data: 'result' });
    } else {
      return Promise.reject(new Error('Failed'));
    }
  });
  ```

- **Mock Window and Browser APIs**:
  ```tsx
  // Mock localStorage
  const localStorageMock = (() => {
    let store = {};
    return {
      getItem: jest.fn(key => store[key] || null),
      setItem: jest.fn((key, value) => {
        store[key] = value.toString();
      }),
      clear: jest.fn(() => {
        store = {};
      })
    };
  })();
  
  Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
  });
  
  // Mock matchMedia
  Object.defineProperty(window, 'matchMedia', {
    value: jest.fn().mockImplementation(query => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: jest.fn(),
      removeListener: jest.fn(),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn(),
    })),
  });
  ```

### 8. Common Pitfalls to Avoid

- **Don't Test Implementation Details**:
  - Focus on user-visible behavior, not internal state
  - Test what the component does, not how it does it

- **Avoid Fragile Selectors**:
  - Don't rely on class names that might change
  - Don't use arbitrary DOM structure that might change

- **Beware of Test Isolation Issues**:
  - Ensure tests don't affect each other
  - Reset global state between tests

- **Watch for Timing Issues**:
  - Use `act()` and `await` with promises
  - Mock timers for predictable timing

- **Prevent Circular Dependencies**:
  - Ensure mocks are defined before imports that use them 